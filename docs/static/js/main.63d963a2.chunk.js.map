{"version":3,"sources":["ListWhist.js","AddWhist.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","width","maxWidth","marginLeft","backgroundColor","palette","background","paper","ListWhist","props","wishes","classes","List","className","map","item","labelId","ListItem","key","button","ListItemText","id","primary","ListItemSecondaryAction","IconButton","edge","aria-label","color","margin","spacing","marginTop","AddWhist","handleChange","handleText","wish","noValidate","autoComplete","TextField","label","value","onChange","type","variant","Button","onClick","size","App","state","bind","event","choice","currentTarget","this","setState","preventDefault","push","whises","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0WAWMA,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJC,MAAO,OACPC,SAAU,IACZC,WAAW,IACTC,gBAAiBL,EAAMM,QAAQC,WAAWC,WAK/B,SAASC,EAAUC,GAAQ,IAEjCC,EAASD,EAATC,OACDC,EAAUd,IAKhB,OACE,kBAACe,EAAA,EAAD,CAAOC,UAAWF,EAAQX,KAAMU,OAAQA,GACrCA,EAAOI,KAAI,SAAAC,GACV,IAAMC,EAAO,wCAAoCD,GACjD,OACE,kBAACE,EAAA,EAAD,CAAUC,IAAKH,EAAMI,QAAM,GAGzB,kBAACC,EAAA,EAAD,CAAcC,GAAIL,EAASM,QAASP,IACpC,kBAACQ,EAAA,EAAD,KAEE,kBAACC,EAAA,EAAD,CAAYC,KAAK,MAAMC,aAAW,UAC1B,kBAAC,IAAD,CAAYC,MAAM,YAAYd,UAAWF,EAAQiB,gB,0BCnCjE/B,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrC6B,OAAQ,CACNA,OAAQ7B,EAAM8B,QAAQ,GACtBC,UAAU,GACVH,MAAM,YA8BKI,MA1Bd,SAAmBtB,GAAQ,IAElBuB,EAAkCvB,EAAlCuB,aAAcC,EAAoBxB,EAApBwB,WAAYC,EAAQzB,EAARyB,KAC3BvB,EAAUd,IAEjB,OACE,0BAAMgB,UAAU,OAAOsB,YAAU,EAACC,aAAa,OAC7C,kBAACC,EAAA,EAAD,CACEhB,GAAG,gBACHiB,MAAM,qBACNzB,UAAU,OACVqB,KAAMA,EACNK,MAAOL,EACPM,SAAUP,EACVQ,KAAK,OACLb,OAAO,SACPc,QAAQ,aAGV,kBAACC,EAAA,EAAD,CAAUJ,MAAM,SAAUK,QAASZ,EAAcU,QAAQ,WAAWG,KAAK,SAASlB,MAAM,UAAUd,UAAWF,EAAQiB,QAArH,eC4BSkB,E,YAtDb,WAAYrC,GAAQ,IAAD,8BACjB,4CAAMA,KACDsC,MAAQ,CACXb,KAAK,GACLxB,OAAO,IAGT,EAAKsB,aAAe,EAAKA,aAAagB,KAAlB,gBACpB,EAAKf,WAAa,EAAKA,WAAWe,KAAhB,gBARD,E,wEAaPC,GACV,IAAMC,EAAOD,EAAME,cAAcZ,MACjCa,KAAKC,SAAS,CAACnB,KAAKgB,M,mCAIRD,GAGZ,GAFAA,EAAMK,iBAEkB,KAApBF,KAAKL,MAAMb,KACb,MAAO,GAGTkB,KAAKL,MAAMrC,OAAO6C,KAAKH,KAAKL,MAAMb,MACnCkB,KAAKC,SAAS,CACXG,OAAOJ,KAAKL,MAAMrC,OAClBwB,KAAK,O,+BAKA,IAAD,EACekB,KAAKL,MAAnBb,EADD,EACCA,KAAMxB,EADP,EACOA,OACf,OACE,yBAAKG,UAAU,OACb,4BAAQA,UAAU,cAChB,oDAEF,8BACE,kBAAC,EAAD,CACAoB,WAAYmB,KAAKnB,WACjBD,aAAcoB,KAAKpB,aACnBtB,OAAQA,EACRwB,KAAMA,IACL,kBAAC1B,EAAD,CACDE,OAAQA,U,GAjDE+C,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.63d963a2.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    width: '100%',\r\n    maxWidth: 360,\r\n  marginLeft:390,\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n}));\r\n\r\n\r\nexport default function ListWhist(props) {\r\n \r\n  const {wishes}= props;\r\n  const classes = useStyles();\r\n\r\n\r\n  \r\n  \r\n  return (\r\n    <List  className={classes.root} wishes={wishes}>\r\n      {wishes.map(item => {\r\n        const labelId = `checkbox-list-secondary-label-${item}`;\r\n        return (\r\n          <ListItem key={item} button>\r\n            \r\n              \r\n            <ListItemText id={labelId} primary={item} />\r\n            <ListItemSecondaryAction>\r\n            \r\n              <IconButton edge=\"end\" aria-label=\"delete\">\r\n                      <DeleteIcon color=\"secondary\" className={classes.margin}  />\r\n                    </IconButton>\r\n            </ListItemSecondaryAction>\r\n            \r\n          </ListItem>\r\n        );\r\n      })}\r\n    </List>\r\n  );\r\n}\r\n\r\n","import React from \"react\";\r\nimport './App.css';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  margin: {\r\n    margin: theme.spacing(1),\r\n    marginTop:25,\r\n    color:\"blue\",\r\n  },\r\n \r\n}));\r\n function AddWhist (props) {\r\n \r\n   const {handleChange, handleText, wish} = props;\r\n   const classes = useStyles(); \r\n\r\n  return (\r\n    <form className=\"form\" noValidate autoComplete=\"off\">\r\n      <TextField\r\n        id=\"outlined-name\"\r\n        label=\"Introduce tu deseo\"\r\n        className=\"text\"\r\n        wish={wish}\r\n        value={wish}\r\n        onChange={handleText}\r\n        type=\"text\"\r\n        margin=\"normal\"\r\n        variant=\"outlined\"\r\n      /> \r\n     \r\n      <Button   value=\"enviar\"  onClick={handleChange} variant=\"outlined\" size=\"medium\" color=\"primary\" className={classes.margin}>\r\n     AÃ±adir\r\n    </Button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default AddWhist;","import React from 'react';\r\nimport ListWhist from './ListWhist';\r\nimport AddWhist from \"./AddWhist\";\r\nimport './App.css';\r\n\r\n\r\nclass App extends React.Component  {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      wish:\"\",\r\n      wishes:[]\r\n     \r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleText = this.handleText.bind(this);\r\n  }\r\n  \r\n \r\n   \r\n  handleText (event) {\r\n    const choice=event.currentTarget.value;\r\n    this.setState({wish:choice,\r\n      \r\n  });\r\n}\r\n  handleChange (event) {\r\n    event.preventDefault();\r\n    debugger;\r\n    if (this.state.wish === \"\") {\r\n      return \"\";\r\n    }\r\n \r\n    this.state.wishes.push(this.state.wish);\r\n   this.setState({\r\n      whises:this.state.wishes,\r\n      wish:\"\"\r\n    });\r\n  \r\n }\r\n\r\n  render(){\r\n    const {wish, wishes}=this.state;\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <h1> Lista de Papa Noel</h1>\r\n      </header>\r\n      <main>\r\n        <AddWhist \r\n        handleText={this.handleText}\r\n        handleChange={this.handleChange}\r\n        wishes={wishes}\r\n        wish={wish}/>\r\n         <ListWhist \r\n        wishes={wishes} />\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}